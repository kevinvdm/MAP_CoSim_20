%implements s0_b0_rws1h_Terminate "C"

%function Terminate(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%assign tlcTerminateFcnOfS0B0 = OpaqueTLCBlockFcn("Terminate", 0, 0, 0, 4, 0)
%if !WHITE_SPACE(tlcTerminateFcnOfS0B0)
/* Terminate for FromWorkspace: '<S2>/FromWs' */
%<tlcTerminateFcnOfS0B0>\
%endif
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Terminate", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Terminate"))
%<SLibCG_AccessArg(0, 4, 0)>
%endif
%if SLibCG_ArgAccessed(0, 4, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Terminate", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Terminate"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 4, 0)>
%endif
%endfunction
%function TerminateFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Terminate(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 4, 0)
%<comma>%<::tSimStructType> * const Controller_Seperate_M\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 4, fcnProtoType)>
%endfunction
