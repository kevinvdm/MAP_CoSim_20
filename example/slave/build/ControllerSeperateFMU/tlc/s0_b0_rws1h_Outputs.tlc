%implements s0_b0_rws1h_Outputs "C"

%function Outputs(block, system) Output
%<SLibCGIRAccessLocalVar(5, 0, "")> %% rtb_FromWs
%<SLibCGIRAccessLocalVar(3, 0, "")> %% rtb_FilterCoefficient
%<SLibCGIRAccessLocalVar(4, 0, "")> %% rtb_IntegralGain
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T u0;
%closefile localVarDecl
%assign tlcOutputsFcnOfS0B0 = OpaqueTLCBlockFcn("Outputs", 0, 0, 0, 2, 0)
%<SLibCG_TrackDW(0)>\
%<SLibCG_TrackBlockIO(0)>\
%<SLibCG_TrackEO(0)>\
%<SLibCG_TrackEI(0)>\
%if !WHITE_SPACE(tlcOutputsFcnOfS0B0)
/* {S!d8}FromWorkspace: '<S2>/FromWs' */
%<tlcOutputsFcnOfS0B0>\
%endif
/* {S!d10}Sum: '<Root>/Sum' incorporates:
 *  Inport: '<Root>/Velocity'
 */
Controller_Seperate_B->Sum = rtb_FromWs - Controller_Seperate_U->Velocity;
/* {S!d12}Gain: '<S37>/Filter Coefficient' incorporates:
 *  DiscreteIntegrator: '<S29>/Filter'
 *  Gain: '<S28>/Derivative Gain'
 *  Sum: '<S29>/SumD'
 */
rtb_FilterCoefficient = (Controller_Seperate_P.PIDController_D * Controller_Seperate_B->Sum - Controller_Seperate_DW->Filter_DSTATE) * Controller_Seperate_P.PIDController_N;
/* {S!d14}Sum: '<S43>/Sum' incorporates:
 *  DiscreteIntegrator: '<S34>/Integrator'
 *  Gain: '<S39>/Proportional Gain'
 */
u0 = (Controller_Seperate_P.PIDController_P * Controller_Seperate_B->Sum + Controller_Seperate_DW->Integrator_DSTATE) + rtb_FilterCoefficient;
/* {S!d22}Saturate: '<Root>/Saturation' */
if (u0 > Controller_Seperate_P.Saturation_UpperSat) {
    /* {S!d16}Outport: '<Root>/Throttle' */
    Controller_Seperate_Y->Throttle = Controller_Seperate_P.Saturation_UpperSat;
} else if (u0 < Controller_Seperate_P.Saturation_LowerSat) {
    /* {S!d18}Outport: '<Root>/Throttle' */
    Controller_Seperate_Y->Throttle = Controller_Seperate_P.Saturation_LowerSat;
} else {
    /* {S!d20}Outport: '<Root>/Throttle' */
    Controller_Seperate_Y->Throttle = u0;
}
/* {E!d22}End of Saturate: '<Root>/Saturation' */

/* {S!d24}Gain: '<S31>/Integral Gain' */
rtb_IntegralGain = Controller_Seperate_P.PIDController_I * Controller_Seperate_B->Sum;
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 2, 0)>
%endif
%if SLibCG_ArgAccessed(0, 2, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 2, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 2, 0)
%<comma>%<::tSimStructType> * const Controller_Seperate_M\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%endfunction
